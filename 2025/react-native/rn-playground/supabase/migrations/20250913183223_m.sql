create schema app;

set search_path to app;

create type user_role as enum (
  'buyer',
  'seller'
);

create table profiles (
  id uuid references auth.users(id) on delete cascade primary key,
  avatar_url text,
  role user_role not null
);

create table products (
  id int4 generated by default as identity primary key,
  name text not null,
  description text
);

create table transactions (
  id uuid default gen_random_uuid() primary key,
  buyer_id uuid references auth.users(id) not null,
  seller_id uuid references auth.users(id) not null,
  amount int4 not null
);

-- create or replace function app.handle_new_user()
-- returns trigger
-- language plpgsql
-- security definer set search_path = ''
-- as $$
-- begin
--   insert into app.profiles (id, avatar_url, role)
--   values (
--     new.id,
--     new.raw_user_meta_data ->> 'avatar_url',
--     (new.raw_user_meta_data ->> 'role')::app.user_role
--   );

--   return new;
-- end;
-- $$;

CREATE OR REPLACE FUNCTION public.test_update_auth_users()
RETURNS TRIGGER 
LANGUAGE plpgsql  
SECURITY DEFINER 
SET search_path = ''  
AS $$ 
BEGIN 
  UPDATE auth.users
  -- SET raw_user_meta_data = '{"role": ""}'::jsonb
  set raw_user_meta_data = raw_user_meta_data - 'role'
  WHERE id = NEW.id;

  RETURN NEW;
END;
$$;

create trigger on_auth_user_created
after insert 
on auth.users
for each row 
execute procedure public.test_update_auth_users();
