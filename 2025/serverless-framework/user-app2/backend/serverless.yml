service: user-app2

package:
  excludeDevDependencies: true
  exclude:
    - package.json
    - package-lock.json
    - README.md
    - .env
    - local/**
    - serverless.yml

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs22.x
  region: ap-northeast-2
  stage: ${opt:stage, 'dev'}
  memorySize: 128
  httpApi:
    authorizers:
      cognitoAuth:
        identitySource: "$request.header.Authorization"
        issuerUrl: !Sub "https://cognito-idp.${aws:region}.amazonaws.com/${CognitoUserPool}"
        audience:
          - !Ref CognitoUserPoolClient
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminDeleteUser
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:ListUsers
          Resource:
            - Fn::GetAtt: [CognitoUserPool, Arn]
  environment:
    USERS_TABLE: !Ref UsersTable
    COGNITO_USER_POOL_ID: !Ref CognitoUserPool

functions:
  api:
    handler: handler.handler
    events:
      - http:
          path: users
          method: get
          authorizer:
            name: cognitoAuth
            type: COGNITO_USER_POOLS

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: user-app2-users-table

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: "user-app2-user-pool"
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: "user-app2-user-pool-client"
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
